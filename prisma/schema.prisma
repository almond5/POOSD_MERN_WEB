generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String    @id @default(cuid()) @map("_id") @db.ObjectId
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id            String      @id @default(cuid()) @map("_id")
  phoneNumber   String
  email         String      @unique
  description   String
  name          String
  password      String
  petProfile    PetProfile?
  emailVerified DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model PetProfile {
  id          String     @id @default(cuid()) @map("_id")
  description String
  location    Location?
  name        String
  species     String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String     @unique
  interests   Interest[]
  image       Image?
}

model Interest {
  id                  String      @id @default(cuid()) @map("_id")
  profileId           String?
  petProfile          PetProfile? @relation(fields: [profileId], references: [id])
  interestedProfileId String?
  isMatch             String
}

model Location {
  id         String      @id @default(cuid()) @map("_id")
  latitude   Float
  longitude  Float
  address    String
  profileId  String      @unique
  petProfile PetProfile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Image {
  id         String     @id @default(cuid()) @map("_id")
  publicId   String
  format     String
  version    String
  petProfile PetProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId  String     @unique
}
