generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String      @id @default(cuid()) @map("_id")
  phoneNumber   String
  email         String      @unique
  description   String
  name          String
  password      String
  petProfile    PetProfile?
  emailVerified DateTime?
}

model PetProfile {
  id             String     @id @default(cuid()) @map("_id")
  description    String
  location       Location?
  name           String
  species        String
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String     @unique
  myInterests    Interest[] @relation(name: "myInterests")
  interestedInMe Interest[] @relation(name: "interestedInMe")
  image          Image?
}

model Interest {
  id                  String      @id @default(cuid()) @map("_id")
  myProfileId         String?
  myProfile           PetProfile? @relation(name: "myInterests", fields: [myProfileId], references: [id])
  interestedProfile   PetProfile? @relation(name: "interestedInMe", fields: [interestedProfileId], references: [id])
  interestedProfileId String?
  isMatch             String
}

model Location {
  id         String      @id @default(cuid()) @map("_id")
  stateId    Float
  countryId  Float
  cityId     Float
  stateName  String
  cityName   String
  profileId  String      @unique
  petProfile PetProfile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Image {
  id         String     @id @default(cuid()) @map("_id")
  publicId   String
  format     String
  version    String
  petProfile PetProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId  String     @unique
}
